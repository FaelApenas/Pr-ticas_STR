
STR_Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e60  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001090  08001090  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001090  08001090  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001090  08001090  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001094  08001094  00011094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080010fc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080010fc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011d2  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055d  00000000  00000000  00021266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000217c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00021938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a97c  00000000  00000000  00021a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c7d  00000000  00000000  0002c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000348b6  00000000  00000000  0002e049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000628ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af4  00000000  00000000  00062950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800100c 	.word	0x0800100c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	0800100c 	.word	0x0800100c

08000204 <sys_delay_ms>:
 */
#include "Systick.h"


void sys_delay_ms(int delay)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	SysTick->LOAD= SYSTICK_LOAD_VAL;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <sys_delay_ms+0x50>)
 800020e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000212:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <sys_delay_ms+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
	SysTick->CTRL= CTRL_ENABLE|CTRL_CLKSRC;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <sys_delay_ms+0x50>)
 800021c:	2205      	movs	r2, #5
 800021e:	601a      	str	r2, [r3, #0]

	for(int i= 0 ; i<delay;i++)
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e009      	b.n	800023a <sys_delay_ms+0x36>
	{
		while((SysTick->CTRL & CTRL_COUNTFLAG)==0){}
 8000226:	bf00      	nop
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <sys_delay_ms+0x50>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0f9      	beq.n	8000228 <sys_delay_ms+0x24>
	for(int i= 0 ; i<delay;i++)
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3301      	adds	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	429a      	cmp	r2, r3
 8000240:	dbf1      	blt.n	8000226 <sys_delay_ms+0x22>
	}
	SysTick->CTRL=0;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <sys_delay_ms+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e010 	.word	0xe000e010

08000258 <__io_putchar>:
 * PA9 -> |()
 */


int __io_putchar(int ch)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 f88f 	bl	8000384 <uart_write>
	return ch;
 8000266:	687b      	ldr	r3, [r7, #4]
}
 8000268:	4618      	mov	r0, r3
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <uart_int>:


void uart_int(uint32_t BaudRate)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1U<<0);
 8000278:	4b34      	ldr	r3, [pc, #208]	; (800034c <uart_int+0xdc>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a33      	ldr	r2, [pc, #204]	; (800034c <uart_int+0xdc>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~ (1U<<4);
 8000284:	4b32      	ldr	r3, [pc, #200]	; (8000350 <uart_int+0xe0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a31      	ldr	r2, [pc, #196]	; (8000350 <uart_int+0xe0>)
 800028a:	f023 0310 	bic.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000290:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <uart_int+0xe0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a2e      	ldr	r2, [pc, #184]	; (8000350 <uart_int+0xe0>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &=~(1U<<6);
 800029c:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <uart_int+0xe0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2b      	ldr	r2, [pc, #172]	; (8000350 <uart_int+0xe0>)
 80002a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 80002a8:	4b29      	ldr	r3, [pc, #164]	; (8000350 <uart_int+0xe0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a28      	ldr	r2, [pc, #160]	; (8000350 <uart_int+0xe0>)
 80002ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b2:	6013      	str	r3, [r2, #0]



	GPIOA->AFR[0] |=(1U<<8);
 80002b4:	4b26      	ldr	r3, [pc, #152]	; (8000350 <uart_int+0xe0>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a25      	ldr	r2, [pc, #148]	; (8000350 <uart_int+0xe0>)
 80002ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <uart_int+0xe0>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <uart_int+0xe0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002cc:	4b20      	ldr	r3, [pc, #128]	; (8000350 <uart_int+0xe0>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a1f      	ldr	r2, [pc, #124]	; (8000350 <uart_int+0xe0>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002d8:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <uart_int+0xe0>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <uart_int+0xe0>)
 80002de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002e2:	6213      	str	r3, [r2, #32]

	GPIOA->AFR[0] |=(1U<<12);
 80002e4:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <uart_int+0xe0>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a19      	ldr	r2, [pc, #100]	; (8000350 <uart_int+0xe0>)
 80002ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <uart_int+0xe0>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <uart_int+0xe0>)
 80002f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <uart_int+0xe0>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <uart_int+0xe0>)
 8000302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000306:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <uart_int+0xe0>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a10      	ldr	r2, [pc, #64]	; (8000350 <uart_int+0xe0>)
 800030e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000312:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (1U<<17);
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <uart_int+0xdc>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	4a0c      	ldr	r2, [pc, #48]	; (800034c <uart_int+0xdc>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031e:	6413      	str	r3, [r2, #64]	; 0x40


	USART2->BRR = compute_uart_bd(sys_freq, BaudRate);
 8000320:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <uart_int+0xe4>)
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <uart_int+0xe8>)
 8000326:	f000 f819 	bl	800035c <compute_uart_bd>
 800032a:	4603      	mov	r3, r0
 800032c:	8123      	strh	r3, [r4, #8]
	USART2->CR1 = (CR1_TE|CR1_RE);
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <uart_int+0xe4>)
 8000330:	220c      	movs	r2, #12
 8000332:	819a      	strh	r2, [r3, #12]
	USART2->CR1|= CR1_UE;
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <uart_int+0xe4>)
 8000336:	899b      	ldrh	r3, [r3, #12]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4a06      	ldr	r2, [pc, #24]	; (8000354 <uart_int+0xe4>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	b29b      	uxth	r3, r3
 8000342:	8193      	strh	r3, [r2, #12]

}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	40023800 	.word	0x40023800
 8000350:	40020000 	.word	0x40020000
 8000354:	40004400 	.word	0x40004400
 8000358:	00f42400 	.word	0x00f42400

0800035c <compute_uart_bd>:



static uint16_t compute_uart_bd(uint32_t periph_clock,uint32_t Baudrate)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	return ((periph_clock+(Baudrate/2U))/Baudrate);
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	085a      	lsrs	r2, r3, #1
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	441a      	add	r2, r3
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	fbb2 f3f3 	udiv	r3, r2, r3
 8000374:	b29b      	uxth	r3, r3

}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
	...

08000384 <uart_write>:

void uart_write(int ch)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 800038c:	bf00      	nop
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <uart_write+0x30>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	b29b      	uxth	r3, r3
 8000394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f8      	beq.n	800038e <uart_write+0xa>

		USART2->DR = (ch & 0xFF);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	b29a      	uxth	r2, r3
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <uart_write+0x30>)
 80003a2:	b2d2      	uxtb	r2, r2
 80003a4:	b292      	uxth	r2, r2
 80003a6:	809a      	strh	r2, [r3, #4]


}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40004400 	.word	0x40004400

080003b8 <main>:
#define  GPIOAEN 		(1U<<0)



int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <main+0x4c>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <main+0x4c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
	uart_int(9600);
 80003c8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80003cc:	f7ff ff50 	bl	8000270 <uart_int>
	GPIOA->MODER |=(1U<<10);
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <main+0x50>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <main+0x50>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <main+0x50>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <main+0x50>)
 80003e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003e6:	6013      	str	r3, [r2, #0]


	while(1)
	{

		printf("teste\n");
 80003e8:	4808      	ldr	r0, [pc, #32]	; (800040c <main+0x54>)
 80003ea:	f000 f97f 	bl	80006ec <puts>
		GPIOA->ODR ^= (1U<<5);
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <main+0x50>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <main+0x50>)
 80003f4:	f083 0320 	eor.w	r3, r3, #32
 80003f8:	6153      	str	r3, [r2, #20]
		sys_delay_ms(1000);
 80003fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fe:	f7ff ff01 	bl	8000204 <sys_delay_ms>
		printf("teste\n");
 8000402:	e7f1      	b.n	80003e8 <main+0x30>
 8000404:	40023800 	.word	0x40023800
 8000408:	40020000 	.word	0x40020000
 800040c:	08001024 	.word	0x08001024

08000410 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e00a      	b.n	8000438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000422:	f3af 8000 	nop.w
 8000426:	4601      	mov	r1, r0
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	60ba      	str	r2, [r7, #8]
 800042e:	b2ca      	uxtb	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	3301      	adds	r3, #1
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	429a      	cmp	r2, r3
 800043e:	dbf0      	blt.n	8000422 <_read+0x12>
  }

  return len;
 8000440:	687b      	ldr	r3, [r7, #4]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e009      	b.n	8000470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fef7 	bl	8000258 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3301      	adds	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	dbf1      	blt.n	800045c <_write+0x12>
  }
  return len;
 8000478:	687b      	ldr	r3, [r7, #4]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <_close>:

int _close(int file)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004aa:	605a      	str	r2, [r3, #4]
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <_isatty>:

int _isatty(int file)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <_sbrk+0x5c>)
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <_sbrk+0x60>)
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <_sbrk+0x64>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <_sbrk+0x68>)
 800050c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	429a      	cmp	r2, r3
 800051a:	d207      	bcs.n	800052c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800051c:	f000 f846 	bl	80005ac <__errno>
 8000520:	4603      	mov	r3, r0
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e009      	b.n	8000540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <_sbrk+0x64>)
 800053c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20020000 	.word	0x20020000
 800054c:	00000400 	.word	0x00000400
 8000550:	20000080 	.word	0x20000080
 8000554:	20000098 	.word	0x20000098

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 f817 	bl	80005b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff ff15 	bl	80003b8 <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800059c:	08001098 	.word	0x08001098
  ldr r2, =_sbss
 80005a0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005a4:	20000094 	.word	0x20000094

080005a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC_IRQHandler>
	...

080005ac <__errno>:
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <__errno+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000

080005b8 <__libc_init_array>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	4d0d      	ldr	r5, [pc, #52]	; (80005f0 <__libc_init_array+0x38>)
 80005bc:	4c0d      	ldr	r4, [pc, #52]	; (80005f4 <__libc_init_array+0x3c>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	2600      	movs	r6, #0
 80005c4:	42a6      	cmp	r6, r4
 80005c6:	d109      	bne.n	80005dc <__libc_init_array+0x24>
 80005c8:	4d0b      	ldr	r5, [pc, #44]	; (80005f8 <__libc_init_array+0x40>)
 80005ca:	4c0c      	ldr	r4, [pc, #48]	; (80005fc <__libc_init_array+0x44>)
 80005cc:	f000 fd1e 	bl	800100c <_init>
 80005d0:	1b64      	subs	r4, r4, r5
 80005d2:	10a4      	asrs	r4, r4, #2
 80005d4:	2600      	movs	r6, #0
 80005d6:	42a6      	cmp	r6, r4
 80005d8:	d105      	bne.n	80005e6 <__libc_init_array+0x2e>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	3601      	adds	r6, #1
 80005e4:	e7ee      	b.n	80005c4 <__libc_init_array+0xc>
 80005e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ea:	4798      	blx	r3
 80005ec:	3601      	adds	r6, #1
 80005ee:	e7f2      	b.n	80005d6 <__libc_init_array+0x1e>
 80005f0:	08001090 	.word	0x08001090
 80005f4:	08001090 	.word	0x08001090
 80005f8:	08001090 	.word	0x08001090
 80005fc:	08001094 	.word	0x08001094

08000600 <memset>:
 8000600:	4402      	add	r2, r0
 8000602:	4603      	mov	r3, r0
 8000604:	4293      	cmp	r3, r2
 8000606:	d100      	bne.n	800060a <memset+0xa>
 8000608:	4770      	bx	lr
 800060a:	f803 1b01 	strb.w	r1, [r3], #1
 800060e:	e7f9      	b.n	8000604 <memset+0x4>

08000610 <_puts_r>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	460e      	mov	r6, r1
 8000614:	4605      	mov	r5, r0
 8000616:	b118      	cbz	r0, 8000620 <_puts_r+0x10>
 8000618:	6983      	ldr	r3, [r0, #24]
 800061a:	b90b      	cbnz	r3, 8000620 <_puts_r+0x10>
 800061c:	f000 fa48 	bl	8000ab0 <__sinit>
 8000620:	69ab      	ldr	r3, [r5, #24]
 8000622:	68ac      	ldr	r4, [r5, #8]
 8000624:	b913      	cbnz	r3, 800062c <_puts_r+0x1c>
 8000626:	4628      	mov	r0, r5
 8000628:	f000 fa42 	bl	8000ab0 <__sinit>
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <_puts_r+0xd0>)
 800062e:	429c      	cmp	r4, r3
 8000630:	d120      	bne.n	8000674 <_puts_r+0x64>
 8000632:	686c      	ldr	r4, [r5, #4]
 8000634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000636:	07db      	lsls	r3, r3, #31
 8000638:	d405      	bmi.n	8000646 <_puts_r+0x36>
 800063a:	89a3      	ldrh	r3, [r4, #12]
 800063c:	0598      	lsls	r0, r3, #22
 800063e:	d402      	bmi.n	8000646 <_puts_r+0x36>
 8000640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000642:	f000 fad3 	bl	8000bec <__retarget_lock_acquire_recursive>
 8000646:	89a3      	ldrh	r3, [r4, #12]
 8000648:	0719      	lsls	r1, r3, #28
 800064a:	d51d      	bpl.n	8000688 <_puts_r+0x78>
 800064c:	6923      	ldr	r3, [r4, #16]
 800064e:	b1db      	cbz	r3, 8000688 <_puts_r+0x78>
 8000650:	3e01      	subs	r6, #1
 8000652:	68a3      	ldr	r3, [r4, #8]
 8000654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000658:	3b01      	subs	r3, #1
 800065a:	60a3      	str	r3, [r4, #8]
 800065c:	bb39      	cbnz	r1, 80006ae <_puts_r+0x9e>
 800065e:	2b00      	cmp	r3, #0
 8000660:	da38      	bge.n	80006d4 <_puts_r+0xc4>
 8000662:	4622      	mov	r2, r4
 8000664:	210a      	movs	r1, #10
 8000666:	4628      	mov	r0, r5
 8000668:	f000 f848 	bl	80006fc <__swbuf_r>
 800066c:	3001      	adds	r0, #1
 800066e:	d011      	beq.n	8000694 <_puts_r+0x84>
 8000670:	250a      	movs	r5, #10
 8000672:	e011      	b.n	8000698 <_puts_r+0x88>
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <_puts_r+0xd4>)
 8000676:	429c      	cmp	r4, r3
 8000678:	d101      	bne.n	800067e <_puts_r+0x6e>
 800067a:	68ac      	ldr	r4, [r5, #8]
 800067c:	e7da      	b.n	8000634 <_puts_r+0x24>
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <_puts_r+0xd8>)
 8000680:	429c      	cmp	r4, r3
 8000682:	bf08      	it	eq
 8000684:	68ec      	ldreq	r4, [r5, #12]
 8000686:	e7d5      	b.n	8000634 <_puts_r+0x24>
 8000688:	4621      	mov	r1, r4
 800068a:	4628      	mov	r0, r5
 800068c:	f000 f888 	bl	80007a0 <__swsetup_r>
 8000690:	2800      	cmp	r0, #0
 8000692:	d0dd      	beq.n	8000650 <_puts_r+0x40>
 8000694:	f04f 35ff 	mov.w	r5, #4294967295
 8000698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800069a:	07da      	lsls	r2, r3, #31
 800069c:	d405      	bmi.n	80006aa <_puts_r+0x9a>
 800069e:	89a3      	ldrh	r3, [r4, #12]
 80006a0:	059b      	lsls	r3, r3, #22
 80006a2:	d402      	bmi.n	80006aa <_puts_r+0x9a>
 80006a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006a6:	f000 faa2 	bl	8000bee <__retarget_lock_release_recursive>
 80006aa:	4628      	mov	r0, r5
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da04      	bge.n	80006bc <_puts_r+0xac>
 80006b2:	69a2      	ldr	r2, [r4, #24]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dc06      	bgt.n	80006c6 <_puts_r+0xb6>
 80006b8:	290a      	cmp	r1, #10
 80006ba:	d004      	beq.n	80006c6 <_puts_r+0xb6>
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	6022      	str	r2, [r4, #0]
 80006c2:	7019      	strb	r1, [r3, #0]
 80006c4:	e7c5      	b.n	8000652 <_puts_r+0x42>
 80006c6:	4622      	mov	r2, r4
 80006c8:	4628      	mov	r0, r5
 80006ca:	f000 f817 	bl	80006fc <__swbuf_r>
 80006ce:	3001      	adds	r0, #1
 80006d0:	d1bf      	bne.n	8000652 <_puts_r+0x42>
 80006d2:	e7df      	b.n	8000694 <_puts_r+0x84>
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	250a      	movs	r5, #10
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	6022      	str	r2, [r4, #0]
 80006dc:	701d      	strb	r5, [r3, #0]
 80006de:	e7db      	b.n	8000698 <_puts_r+0x88>
 80006e0:	08001050 	.word	0x08001050
 80006e4:	08001070 	.word	0x08001070
 80006e8:	08001030 	.word	0x08001030

080006ec <puts>:
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <puts+0xc>)
 80006ee:	4601      	mov	r1, r0
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	f7ff bf8d 	b.w	8000610 <_puts_r>
 80006f6:	bf00      	nop
 80006f8:	20000000 	.word	0x20000000

080006fc <__swbuf_r>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	460e      	mov	r6, r1
 8000700:	4614      	mov	r4, r2
 8000702:	4605      	mov	r5, r0
 8000704:	b118      	cbz	r0, 800070e <__swbuf_r+0x12>
 8000706:	6983      	ldr	r3, [r0, #24]
 8000708:	b90b      	cbnz	r3, 800070e <__swbuf_r+0x12>
 800070a:	f000 f9d1 	bl	8000ab0 <__sinit>
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <__swbuf_r+0x98>)
 8000710:	429c      	cmp	r4, r3
 8000712:	d12b      	bne.n	800076c <__swbuf_r+0x70>
 8000714:	686c      	ldr	r4, [r5, #4]
 8000716:	69a3      	ldr	r3, [r4, #24]
 8000718:	60a3      	str	r3, [r4, #8]
 800071a:	89a3      	ldrh	r3, [r4, #12]
 800071c:	071a      	lsls	r2, r3, #28
 800071e:	d52f      	bpl.n	8000780 <__swbuf_r+0x84>
 8000720:	6923      	ldr	r3, [r4, #16]
 8000722:	b36b      	cbz	r3, 8000780 <__swbuf_r+0x84>
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	6820      	ldr	r0, [r4, #0]
 8000728:	1ac0      	subs	r0, r0, r3
 800072a:	6963      	ldr	r3, [r4, #20]
 800072c:	b2f6      	uxtb	r6, r6
 800072e:	4283      	cmp	r3, r0
 8000730:	4637      	mov	r7, r6
 8000732:	dc04      	bgt.n	800073e <__swbuf_r+0x42>
 8000734:	4621      	mov	r1, r4
 8000736:	4628      	mov	r0, r5
 8000738:	f000 f926 	bl	8000988 <_fflush_r>
 800073c:	bb30      	cbnz	r0, 800078c <__swbuf_r+0x90>
 800073e:	68a3      	ldr	r3, [r4, #8]
 8000740:	3b01      	subs	r3, #1
 8000742:	60a3      	str	r3, [r4, #8]
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	6022      	str	r2, [r4, #0]
 800074a:	701e      	strb	r6, [r3, #0]
 800074c:	6963      	ldr	r3, [r4, #20]
 800074e:	3001      	adds	r0, #1
 8000750:	4283      	cmp	r3, r0
 8000752:	d004      	beq.n	800075e <__swbuf_r+0x62>
 8000754:	89a3      	ldrh	r3, [r4, #12]
 8000756:	07db      	lsls	r3, r3, #31
 8000758:	d506      	bpl.n	8000768 <__swbuf_r+0x6c>
 800075a:	2e0a      	cmp	r6, #10
 800075c:	d104      	bne.n	8000768 <__swbuf_r+0x6c>
 800075e:	4621      	mov	r1, r4
 8000760:	4628      	mov	r0, r5
 8000762:	f000 f911 	bl	8000988 <_fflush_r>
 8000766:	b988      	cbnz	r0, 800078c <__swbuf_r+0x90>
 8000768:	4638      	mov	r0, r7
 800076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <__swbuf_r+0x9c>)
 800076e:	429c      	cmp	r4, r3
 8000770:	d101      	bne.n	8000776 <__swbuf_r+0x7a>
 8000772:	68ac      	ldr	r4, [r5, #8]
 8000774:	e7cf      	b.n	8000716 <__swbuf_r+0x1a>
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <__swbuf_r+0xa0>)
 8000778:	429c      	cmp	r4, r3
 800077a:	bf08      	it	eq
 800077c:	68ec      	ldreq	r4, [r5, #12]
 800077e:	e7ca      	b.n	8000716 <__swbuf_r+0x1a>
 8000780:	4621      	mov	r1, r4
 8000782:	4628      	mov	r0, r5
 8000784:	f000 f80c 	bl	80007a0 <__swsetup_r>
 8000788:	2800      	cmp	r0, #0
 800078a:	d0cb      	beq.n	8000724 <__swbuf_r+0x28>
 800078c:	f04f 37ff 	mov.w	r7, #4294967295
 8000790:	e7ea      	b.n	8000768 <__swbuf_r+0x6c>
 8000792:	bf00      	nop
 8000794:	08001050 	.word	0x08001050
 8000798:	08001070 	.word	0x08001070
 800079c:	08001030 	.word	0x08001030

080007a0 <__swsetup_r>:
 80007a0:	4b32      	ldr	r3, [pc, #200]	; (800086c <__swsetup_r+0xcc>)
 80007a2:	b570      	push	{r4, r5, r6, lr}
 80007a4:	681d      	ldr	r5, [r3, #0]
 80007a6:	4606      	mov	r6, r0
 80007a8:	460c      	mov	r4, r1
 80007aa:	b125      	cbz	r5, 80007b6 <__swsetup_r+0x16>
 80007ac:	69ab      	ldr	r3, [r5, #24]
 80007ae:	b913      	cbnz	r3, 80007b6 <__swsetup_r+0x16>
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 f97d 	bl	8000ab0 <__sinit>
 80007b6:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <__swsetup_r+0xd0>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	d10f      	bne.n	80007dc <__swsetup_r+0x3c>
 80007bc:	686c      	ldr	r4, [r5, #4]
 80007be:	89a3      	ldrh	r3, [r4, #12]
 80007c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007c4:	0719      	lsls	r1, r3, #28
 80007c6:	d42c      	bmi.n	8000822 <__swsetup_r+0x82>
 80007c8:	06dd      	lsls	r5, r3, #27
 80007ca:	d411      	bmi.n	80007f0 <__swsetup_r+0x50>
 80007cc:	2309      	movs	r3, #9
 80007ce:	6033      	str	r3, [r6, #0]
 80007d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80007d4:	81a3      	strh	r3, [r4, #12]
 80007d6:	f04f 30ff 	mov.w	r0, #4294967295
 80007da:	e03e      	b.n	800085a <__swsetup_r+0xba>
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <__swsetup_r+0xd4>)
 80007de:	429c      	cmp	r4, r3
 80007e0:	d101      	bne.n	80007e6 <__swsetup_r+0x46>
 80007e2:	68ac      	ldr	r4, [r5, #8]
 80007e4:	e7eb      	b.n	80007be <__swsetup_r+0x1e>
 80007e6:	4b24      	ldr	r3, [pc, #144]	; (8000878 <__swsetup_r+0xd8>)
 80007e8:	429c      	cmp	r4, r3
 80007ea:	bf08      	it	eq
 80007ec:	68ec      	ldreq	r4, [r5, #12]
 80007ee:	e7e6      	b.n	80007be <__swsetup_r+0x1e>
 80007f0:	0758      	lsls	r0, r3, #29
 80007f2:	d512      	bpl.n	800081a <__swsetup_r+0x7a>
 80007f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007f6:	b141      	cbz	r1, 800080a <__swsetup_r+0x6a>
 80007f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007fc:	4299      	cmp	r1, r3
 80007fe:	d002      	beq.n	8000806 <__swsetup_r+0x66>
 8000800:	4630      	mov	r0, r6
 8000802:	f000 fa5b 	bl	8000cbc <_free_r>
 8000806:	2300      	movs	r3, #0
 8000808:	6363      	str	r3, [r4, #52]	; 0x34
 800080a:	89a3      	ldrh	r3, [r4, #12]
 800080c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000810:	81a3      	strh	r3, [r4, #12]
 8000812:	2300      	movs	r3, #0
 8000814:	6063      	str	r3, [r4, #4]
 8000816:	6923      	ldr	r3, [r4, #16]
 8000818:	6023      	str	r3, [r4, #0]
 800081a:	89a3      	ldrh	r3, [r4, #12]
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	81a3      	strh	r3, [r4, #12]
 8000822:	6923      	ldr	r3, [r4, #16]
 8000824:	b94b      	cbnz	r3, 800083a <__swsetup_r+0x9a>
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800082c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000830:	d003      	beq.n	800083a <__swsetup_r+0x9a>
 8000832:	4621      	mov	r1, r4
 8000834:	4630      	mov	r0, r6
 8000836:	f000 fa01 	bl	8000c3c <__smakebuf_r>
 800083a:	89a0      	ldrh	r0, [r4, #12]
 800083c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000840:	f010 0301 	ands.w	r3, r0, #1
 8000844:	d00a      	beq.n	800085c <__swsetup_r+0xbc>
 8000846:	2300      	movs	r3, #0
 8000848:	60a3      	str	r3, [r4, #8]
 800084a:	6963      	ldr	r3, [r4, #20]
 800084c:	425b      	negs	r3, r3
 800084e:	61a3      	str	r3, [r4, #24]
 8000850:	6923      	ldr	r3, [r4, #16]
 8000852:	b943      	cbnz	r3, 8000866 <__swsetup_r+0xc6>
 8000854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000858:	d1ba      	bne.n	80007d0 <__swsetup_r+0x30>
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	0781      	lsls	r1, r0, #30
 800085e:	bf58      	it	pl
 8000860:	6963      	ldrpl	r3, [r4, #20]
 8000862:	60a3      	str	r3, [r4, #8]
 8000864:	e7f4      	b.n	8000850 <__swsetup_r+0xb0>
 8000866:	2000      	movs	r0, #0
 8000868:	e7f7      	b.n	800085a <__swsetup_r+0xba>
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	08001050 	.word	0x08001050
 8000874:	08001070 	.word	0x08001070
 8000878:	08001030 	.word	0x08001030

0800087c <__sflush_r>:
 800087c:	898a      	ldrh	r2, [r1, #12]
 800087e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000882:	4605      	mov	r5, r0
 8000884:	0710      	lsls	r0, r2, #28
 8000886:	460c      	mov	r4, r1
 8000888:	d458      	bmi.n	800093c <__sflush_r+0xc0>
 800088a:	684b      	ldr	r3, [r1, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dc05      	bgt.n	800089c <__sflush_r+0x20>
 8000890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000892:	2b00      	cmp	r3, #0
 8000894:	dc02      	bgt.n	800089c <__sflush_r+0x20>
 8000896:	2000      	movs	r0, #0
 8000898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800089c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d0f9      	beq.n	8000896 <__sflush_r+0x1a>
 80008a2:	2300      	movs	r3, #0
 80008a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008a8:	682f      	ldr	r7, [r5, #0]
 80008aa:	602b      	str	r3, [r5, #0]
 80008ac:	d032      	beq.n	8000914 <__sflush_r+0x98>
 80008ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008b0:	89a3      	ldrh	r3, [r4, #12]
 80008b2:	075a      	lsls	r2, r3, #29
 80008b4:	d505      	bpl.n	80008c2 <__sflush_r+0x46>
 80008b6:	6863      	ldr	r3, [r4, #4]
 80008b8:	1ac0      	subs	r0, r0, r3
 80008ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008bc:	b10b      	cbz	r3, 80008c2 <__sflush_r+0x46>
 80008be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008c0:	1ac0      	subs	r0, r0, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	4602      	mov	r2, r0
 80008c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008c8:	6a21      	ldr	r1, [r4, #32]
 80008ca:	4628      	mov	r0, r5
 80008cc:	47b0      	blx	r6
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	d106      	bne.n	80008e2 <__sflush_r+0x66>
 80008d4:	6829      	ldr	r1, [r5, #0]
 80008d6:	291d      	cmp	r1, #29
 80008d8:	d82c      	bhi.n	8000934 <__sflush_r+0xb8>
 80008da:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <__sflush_r+0x108>)
 80008dc:	40ca      	lsrs	r2, r1
 80008de:	07d6      	lsls	r6, r2, #31
 80008e0:	d528      	bpl.n	8000934 <__sflush_r+0xb8>
 80008e2:	2200      	movs	r2, #0
 80008e4:	6062      	str	r2, [r4, #4]
 80008e6:	04d9      	lsls	r1, r3, #19
 80008e8:	6922      	ldr	r2, [r4, #16]
 80008ea:	6022      	str	r2, [r4, #0]
 80008ec:	d504      	bpl.n	80008f8 <__sflush_r+0x7c>
 80008ee:	1c42      	adds	r2, r0, #1
 80008f0:	d101      	bne.n	80008f6 <__sflush_r+0x7a>
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	b903      	cbnz	r3, 80008f8 <__sflush_r+0x7c>
 80008f6:	6560      	str	r0, [r4, #84]	; 0x54
 80008f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008fa:	602f      	str	r7, [r5, #0]
 80008fc:	2900      	cmp	r1, #0
 80008fe:	d0ca      	beq.n	8000896 <__sflush_r+0x1a>
 8000900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000904:	4299      	cmp	r1, r3
 8000906:	d002      	beq.n	800090e <__sflush_r+0x92>
 8000908:	4628      	mov	r0, r5
 800090a:	f000 f9d7 	bl	8000cbc <_free_r>
 800090e:	2000      	movs	r0, #0
 8000910:	6360      	str	r0, [r4, #52]	; 0x34
 8000912:	e7c1      	b.n	8000898 <__sflush_r+0x1c>
 8000914:	6a21      	ldr	r1, [r4, #32]
 8000916:	2301      	movs	r3, #1
 8000918:	4628      	mov	r0, r5
 800091a:	47b0      	blx	r6
 800091c:	1c41      	adds	r1, r0, #1
 800091e:	d1c7      	bne.n	80008b0 <__sflush_r+0x34>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0c4      	beq.n	80008b0 <__sflush_r+0x34>
 8000926:	2b1d      	cmp	r3, #29
 8000928:	d001      	beq.n	800092e <__sflush_r+0xb2>
 800092a:	2b16      	cmp	r3, #22
 800092c:	d101      	bne.n	8000932 <__sflush_r+0xb6>
 800092e:	602f      	str	r7, [r5, #0]
 8000930:	e7b1      	b.n	8000896 <__sflush_r+0x1a>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000938:	81a3      	strh	r3, [r4, #12]
 800093a:	e7ad      	b.n	8000898 <__sflush_r+0x1c>
 800093c:	690f      	ldr	r7, [r1, #16]
 800093e:	2f00      	cmp	r7, #0
 8000940:	d0a9      	beq.n	8000896 <__sflush_r+0x1a>
 8000942:	0793      	lsls	r3, r2, #30
 8000944:	680e      	ldr	r6, [r1, #0]
 8000946:	bf08      	it	eq
 8000948:	694b      	ldreq	r3, [r1, #20]
 800094a:	600f      	str	r7, [r1, #0]
 800094c:	bf18      	it	ne
 800094e:	2300      	movne	r3, #0
 8000950:	eba6 0807 	sub.w	r8, r6, r7
 8000954:	608b      	str	r3, [r1, #8]
 8000956:	f1b8 0f00 	cmp.w	r8, #0
 800095a:	dd9c      	ble.n	8000896 <__sflush_r+0x1a>
 800095c:	6a21      	ldr	r1, [r4, #32]
 800095e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000960:	4643      	mov	r3, r8
 8000962:	463a      	mov	r2, r7
 8000964:	4628      	mov	r0, r5
 8000966:	47b0      	blx	r6
 8000968:	2800      	cmp	r0, #0
 800096a:	dc06      	bgt.n	800097a <__sflush_r+0xfe>
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000972:	81a3      	strh	r3, [r4, #12]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	e78e      	b.n	8000898 <__sflush_r+0x1c>
 800097a:	4407      	add	r7, r0
 800097c:	eba8 0800 	sub.w	r8, r8, r0
 8000980:	e7e9      	b.n	8000956 <__sflush_r+0xda>
 8000982:	bf00      	nop
 8000984:	20400001 	.word	0x20400001

08000988 <_fflush_r>:
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	690b      	ldr	r3, [r1, #16]
 800098c:	4605      	mov	r5, r0
 800098e:	460c      	mov	r4, r1
 8000990:	b913      	cbnz	r3, 8000998 <_fflush_r+0x10>
 8000992:	2500      	movs	r5, #0
 8000994:	4628      	mov	r0, r5
 8000996:	bd38      	pop	{r3, r4, r5, pc}
 8000998:	b118      	cbz	r0, 80009a2 <_fflush_r+0x1a>
 800099a:	6983      	ldr	r3, [r0, #24]
 800099c:	b90b      	cbnz	r3, 80009a2 <_fflush_r+0x1a>
 800099e:	f000 f887 	bl	8000ab0 <__sinit>
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <_fflush_r+0x6c>)
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d11b      	bne.n	80009e0 <_fflush_r+0x58>
 80009a8:	686c      	ldr	r4, [r5, #4]
 80009aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0ef      	beq.n	8000992 <_fflush_r+0xa>
 80009b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009b4:	07d0      	lsls	r0, r2, #31
 80009b6:	d404      	bmi.n	80009c2 <_fflush_r+0x3a>
 80009b8:	0599      	lsls	r1, r3, #22
 80009ba:	d402      	bmi.n	80009c2 <_fflush_r+0x3a>
 80009bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009be:	f000 f915 	bl	8000bec <__retarget_lock_acquire_recursive>
 80009c2:	4628      	mov	r0, r5
 80009c4:	4621      	mov	r1, r4
 80009c6:	f7ff ff59 	bl	800087c <__sflush_r>
 80009ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009cc:	07da      	lsls	r2, r3, #31
 80009ce:	4605      	mov	r5, r0
 80009d0:	d4e0      	bmi.n	8000994 <_fflush_r+0xc>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	059b      	lsls	r3, r3, #22
 80009d6:	d4dd      	bmi.n	8000994 <_fflush_r+0xc>
 80009d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009da:	f000 f908 	bl	8000bee <__retarget_lock_release_recursive>
 80009de:	e7d9      	b.n	8000994 <_fflush_r+0xc>
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <_fflush_r+0x70>)
 80009e2:	429c      	cmp	r4, r3
 80009e4:	d101      	bne.n	80009ea <_fflush_r+0x62>
 80009e6:	68ac      	ldr	r4, [r5, #8]
 80009e8:	e7df      	b.n	80009aa <_fflush_r+0x22>
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <_fflush_r+0x74>)
 80009ec:	429c      	cmp	r4, r3
 80009ee:	bf08      	it	eq
 80009f0:	68ec      	ldreq	r4, [r5, #12]
 80009f2:	e7da      	b.n	80009aa <_fflush_r+0x22>
 80009f4:	08001050 	.word	0x08001050
 80009f8:	08001070 	.word	0x08001070
 80009fc:	08001030 	.word	0x08001030

08000a00 <std>:
 8000a00:	2300      	movs	r3, #0
 8000a02:	b510      	push	{r4, lr}
 8000a04:	4604      	mov	r4, r0
 8000a06:	e9c0 3300 	strd	r3, r3, [r0]
 8000a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a0e:	6083      	str	r3, [r0, #8]
 8000a10:	8181      	strh	r1, [r0, #12]
 8000a12:	6643      	str	r3, [r0, #100]	; 0x64
 8000a14:	81c2      	strh	r2, [r0, #14]
 8000a16:	6183      	str	r3, [r0, #24]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	305c      	adds	r0, #92	; 0x5c
 8000a1e:	f7ff fdef 	bl	8000600 <memset>
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <std+0x38>)
 8000a24:	6263      	str	r3, [r4, #36]	; 0x24
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <std+0x3c>)
 8000a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <std+0x40>)
 8000a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <std+0x44>)
 8000a30:	6224      	str	r4, [r4, #32]
 8000a32:	6323      	str	r3, [r4, #48]	; 0x30
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	08000e9d 	.word	0x08000e9d
 8000a3c:	08000ebf 	.word	0x08000ebf
 8000a40:	08000ef7 	.word	0x08000ef7
 8000a44:	08000f1b 	.word	0x08000f1b

08000a48 <_cleanup_r>:
 8000a48:	4901      	ldr	r1, [pc, #4]	; (8000a50 <_cleanup_r+0x8>)
 8000a4a:	f000 b8af 	b.w	8000bac <_fwalk_reent>
 8000a4e:	bf00      	nop
 8000a50:	08000989 	.word	0x08000989

08000a54 <__sfmoreglue>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	2268      	movs	r2, #104	; 0x68
 8000a58:	1e4d      	subs	r5, r1, #1
 8000a5a:	4355      	muls	r5, r2
 8000a5c:	460e      	mov	r6, r1
 8000a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a62:	f000 f997 	bl	8000d94 <_malloc_r>
 8000a66:	4604      	mov	r4, r0
 8000a68:	b140      	cbz	r0, 8000a7c <__sfmoreglue+0x28>
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8000a70:	300c      	adds	r0, #12
 8000a72:	60a0      	str	r0, [r4, #8]
 8000a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a78:	f7ff fdc2 	bl	8000600 <memset>
 8000a7c:	4620      	mov	r0, r4
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}

08000a80 <__sfp_lock_acquire>:
 8000a80:	4801      	ldr	r0, [pc, #4]	; (8000a88 <__sfp_lock_acquire+0x8>)
 8000a82:	f000 b8b3 	b.w	8000bec <__retarget_lock_acquire_recursive>
 8000a86:	bf00      	nop
 8000a88:	20000085 	.word	0x20000085

08000a8c <__sfp_lock_release>:
 8000a8c:	4801      	ldr	r0, [pc, #4]	; (8000a94 <__sfp_lock_release+0x8>)
 8000a8e:	f000 b8ae 	b.w	8000bee <__retarget_lock_release_recursive>
 8000a92:	bf00      	nop
 8000a94:	20000085 	.word	0x20000085

08000a98 <__sinit_lock_acquire>:
 8000a98:	4801      	ldr	r0, [pc, #4]	; (8000aa0 <__sinit_lock_acquire+0x8>)
 8000a9a:	f000 b8a7 	b.w	8000bec <__retarget_lock_acquire_recursive>
 8000a9e:	bf00      	nop
 8000aa0:	20000086 	.word	0x20000086

08000aa4 <__sinit_lock_release>:
 8000aa4:	4801      	ldr	r0, [pc, #4]	; (8000aac <__sinit_lock_release+0x8>)
 8000aa6:	f000 b8a2 	b.w	8000bee <__retarget_lock_release_recursive>
 8000aaa:	bf00      	nop
 8000aac:	20000086 	.word	0x20000086

08000ab0 <__sinit>:
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	f7ff fff0 	bl	8000a98 <__sinit_lock_acquire>
 8000ab8:	69a3      	ldr	r3, [r4, #24]
 8000aba:	b11b      	cbz	r3, 8000ac4 <__sinit+0x14>
 8000abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ac0:	f7ff bff0 	b.w	8000aa4 <__sinit_lock_release>
 8000ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <__sinit+0x68>)
 8000acc:	4a13      	ldr	r2, [pc, #76]	; (8000b1c <__sinit+0x6c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	bf04      	itt	eq
 8000ad6:	2301      	moveq	r3, #1
 8000ad8:	61a3      	streq	r3, [r4, #24]
 8000ada:	4620      	mov	r0, r4
 8000adc:	f000 f820 	bl	8000b20 <__sfp>
 8000ae0:	6060      	str	r0, [r4, #4]
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f000 f81c 	bl	8000b20 <__sfp>
 8000ae8:	60a0      	str	r0, [r4, #8]
 8000aea:	4620      	mov	r0, r4
 8000aec:	f000 f818 	bl	8000b20 <__sfp>
 8000af0:	2200      	movs	r2, #0
 8000af2:	60e0      	str	r0, [r4, #12]
 8000af4:	2104      	movs	r1, #4
 8000af6:	6860      	ldr	r0, [r4, #4]
 8000af8:	f7ff ff82 	bl	8000a00 <std>
 8000afc:	68a0      	ldr	r0, [r4, #8]
 8000afe:	2201      	movs	r2, #1
 8000b00:	2109      	movs	r1, #9
 8000b02:	f7ff ff7d 	bl	8000a00 <std>
 8000b06:	68e0      	ldr	r0, [r4, #12]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	2112      	movs	r1, #18
 8000b0c:	f7ff ff78 	bl	8000a00 <std>
 8000b10:	2301      	movs	r3, #1
 8000b12:	61a3      	str	r3, [r4, #24]
 8000b14:	e7d2      	b.n	8000abc <__sinit+0xc>
 8000b16:	bf00      	nop
 8000b18:	0800102c 	.word	0x0800102c
 8000b1c:	08000a49 	.word	0x08000a49

08000b20 <__sfp>:
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b22:	4607      	mov	r7, r0
 8000b24:	f7ff ffac 	bl	8000a80 <__sfp_lock_acquire>
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <__sfp+0x84>)
 8000b2a:	681e      	ldr	r6, [r3, #0]
 8000b2c:	69b3      	ldr	r3, [r6, #24]
 8000b2e:	b913      	cbnz	r3, 8000b36 <__sfp+0x16>
 8000b30:	4630      	mov	r0, r6
 8000b32:	f7ff ffbd 	bl	8000ab0 <__sinit>
 8000b36:	3648      	adds	r6, #72	; 0x48
 8000b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	d503      	bpl.n	8000b48 <__sfp+0x28>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	b30b      	cbz	r3, 8000b88 <__sfp+0x68>
 8000b44:	6836      	ldr	r6, [r6, #0]
 8000b46:	e7f7      	b.n	8000b38 <__sfp+0x18>
 8000b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b4c:	b9d5      	cbnz	r5, 8000b84 <__sfp+0x64>
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <__sfp+0x88>)
 8000b50:	60e3      	str	r3, [r4, #12]
 8000b52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b56:	6665      	str	r5, [r4, #100]	; 0x64
 8000b58:	f000 f847 	bl	8000bea <__retarget_lock_init_recursive>
 8000b5c:	f7ff ff96 	bl	8000a8c <__sfp_lock_release>
 8000b60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b68:	6025      	str	r5, [r4, #0]
 8000b6a:	61a5      	str	r5, [r4, #24]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4629      	mov	r1, r5
 8000b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b74:	f7ff fd44 	bl	8000600 <memset>
 8000b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b80:	4620      	mov	r0, r4
 8000b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b84:	3468      	adds	r4, #104	; 0x68
 8000b86:	e7d9      	b.n	8000b3c <__sfp+0x1c>
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f7ff ff62 	bl	8000a54 <__sfmoreglue>
 8000b90:	4604      	mov	r4, r0
 8000b92:	6030      	str	r0, [r6, #0]
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d1d5      	bne.n	8000b44 <__sfp+0x24>
 8000b98:	f7ff ff78 	bl	8000a8c <__sfp_lock_release>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	e7ee      	b.n	8000b80 <__sfp+0x60>
 8000ba2:	bf00      	nop
 8000ba4:	0800102c 	.word	0x0800102c
 8000ba8:	ffff0001 	.word	0xffff0001

08000bac <_fwalk_reent>:
 8000bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	4688      	mov	r8, r1
 8000bb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8000bc2:	d505      	bpl.n	8000bd0 <_fwalk_reent+0x24>
 8000bc4:	6824      	ldr	r4, [r4, #0]
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d1f7      	bne.n	8000bba <_fwalk_reent+0xe>
 8000bca:	4638      	mov	r0, r7
 8000bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bd0:	89ab      	ldrh	r3, [r5, #12]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d907      	bls.n	8000be6 <_fwalk_reent+0x3a>
 8000bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	d003      	beq.n	8000be6 <_fwalk_reent+0x3a>
 8000bde:	4629      	mov	r1, r5
 8000be0:	4630      	mov	r0, r6
 8000be2:	47c0      	blx	r8
 8000be4:	4307      	orrs	r7, r0
 8000be6:	3568      	adds	r5, #104	; 0x68
 8000be8:	e7e9      	b.n	8000bbe <_fwalk_reent+0x12>

08000bea <__retarget_lock_init_recursive>:
 8000bea:	4770      	bx	lr

08000bec <__retarget_lock_acquire_recursive>:
 8000bec:	4770      	bx	lr

08000bee <__retarget_lock_release_recursive>:
 8000bee:	4770      	bx	lr

08000bf0 <__swhatbuf_r>:
 8000bf0:	b570      	push	{r4, r5, r6, lr}
 8000bf2:	460e      	mov	r6, r1
 8000bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	b096      	sub	sp, #88	; 0x58
 8000bfc:	4614      	mov	r4, r2
 8000bfe:	461d      	mov	r5, r3
 8000c00:	da08      	bge.n	8000c14 <__swhatbuf_r+0x24>
 8000c02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c06:	2200      	movs	r2, #0
 8000c08:	602a      	str	r2, [r5, #0]
 8000c0a:	061a      	lsls	r2, r3, #24
 8000c0c:	d410      	bmi.n	8000c30 <__swhatbuf_r+0x40>
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	e00e      	b.n	8000c32 <__swhatbuf_r+0x42>
 8000c14:	466a      	mov	r2, sp
 8000c16:	f000 f9a7 	bl	8000f68 <_fstat_r>
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	dbf1      	blt.n	8000c02 <__swhatbuf_r+0x12>
 8000c1e:	9a01      	ldr	r2, [sp, #4]
 8000c20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c28:	425a      	negs	r2, r3
 8000c2a:	415a      	adcs	r2, r3
 8000c2c:	602a      	str	r2, [r5, #0]
 8000c2e:	e7ee      	b.n	8000c0e <__swhatbuf_r+0x1e>
 8000c30:	2340      	movs	r3, #64	; 0x40
 8000c32:	2000      	movs	r0, #0
 8000c34:	6023      	str	r3, [r4, #0]
 8000c36:	b016      	add	sp, #88	; 0x58
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c3c <__smakebuf_r>:
 8000c3c:	898b      	ldrh	r3, [r1, #12]
 8000c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c40:	079d      	lsls	r5, r3, #30
 8000c42:	4606      	mov	r6, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	d507      	bpl.n	8000c58 <__smakebuf_r+0x1c>
 8000c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c4c:	6023      	str	r3, [r4, #0]
 8000c4e:	6123      	str	r3, [r4, #16]
 8000c50:	2301      	movs	r3, #1
 8000c52:	6163      	str	r3, [r4, #20]
 8000c54:	b002      	add	sp, #8
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	ab01      	add	r3, sp, #4
 8000c5a:	466a      	mov	r2, sp
 8000c5c:	f7ff ffc8 	bl	8000bf0 <__swhatbuf_r>
 8000c60:	9900      	ldr	r1, [sp, #0]
 8000c62:	4605      	mov	r5, r0
 8000c64:	4630      	mov	r0, r6
 8000c66:	f000 f895 	bl	8000d94 <_malloc_r>
 8000c6a:	b948      	cbnz	r0, 8000c80 <__smakebuf_r+0x44>
 8000c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c70:	059a      	lsls	r2, r3, #22
 8000c72:	d4ef      	bmi.n	8000c54 <__smakebuf_r+0x18>
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	81a3      	strh	r3, [r4, #12]
 8000c7e:	e7e3      	b.n	8000c48 <__smakebuf_r+0xc>
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <__smakebuf_r+0x7c>)
 8000c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	6020      	str	r0, [r4, #0]
 8000c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8c:	81a3      	strh	r3, [r4, #12]
 8000c8e:	9b00      	ldr	r3, [sp, #0]
 8000c90:	6163      	str	r3, [r4, #20]
 8000c92:	9b01      	ldr	r3, [sp, #4]
 8000c94:	6120      	str	r0, [r4, #16]
 8000c96:	b15b      	cbz	r3, 8000cb0 <__smakebuf_r+0x74>
 8000c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	f000 f975 	bl	8000f8c <_isatty_r>
 8000ca2:	b128      	cbz	r0, 8000cb0 <__smakebuf_r+0x74>
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	81a3      	strh	r3, [r4, #12]
 8000cb0:	89a0      	ldrh	r0, [r4, #12]
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	81a5      	strh	r5, [r4, #12]
 8000cb6:	e7cd      	b.n	8000c54 <__smakebuf_r+0x18>
 8000cb8:	08000a49 	.word	0x08000a49

08000cbc <_free_r>:
 8000cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d044      	beq.n	8000d4c <_free_r+0x90>
 8000cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cc6:	9001      	str	r0, [sp, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f1a1 0404 	sub.w	r4, r1, #4
 8000cce:	bfb8      	it	lt
 8000cd0:	18e4      	addlt	r4, r4, r3
 8000cd2:	f000 f97d 	bl	8000fd0 <__malloc_lock>
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <_free_r+0x94>)
 8000cd8:	9801      	ldr	r0, [sp, #4]
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	b933      	cbnz	r3, 8000cec <_free_r+0x30>
 8000cde:	6063      	str	r3, [r4, #4]
 8000ce0:	6014      	str	r4, [r2, #0]
 8000ce2:	b003      	add	sp, #12
 8000ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ce8:	f000 b978 	b.w	8000fdc <__malloc_unlock>
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <_free_r+0x46>
 8000cf0:	6825      	ldr	r5, [r4, #0]
 8000cf2:	1961      	adds	r1, r4, r5
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	bf01      	itttt	eq
 8000cf8:	6819      	ldreq	r1, [r3, #0]
 8000cfa:	685b      	ldreq	r3, [r3, #4]
 8000cfc:	1949      	addeq	r1, r1, r5
 8000cfe:	6021      	streq	r1, [r4, #0]
 8000d00:	e7ed      	b.n	8000cde <_free_r+0x22>
 8000d02:	461a      	mov	r2, r3
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	b10b      	cbz	r3, 8000d0c <_free_r+0x50>
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	d9fa      	bls.n	8000d02 <_free_r+0x46>
 8000d0c:	6811      	ldr	r1, [r2, #0]
 8000d0e:	1855      	adds	r5, r2, r1
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	d10b      	bne.n	8000d2c <_free_r+0x70>
 8000d14:	6824      	ldr	r4, [r4, #0]
 8000d16:	4421      	add	r1, r4
 8000d18:	1854      	adds	r4, r2, r1
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	6011      	str	r1, [r2, #0]
 8000d1e:	d1e0      	bne.n	8000ce2 <_free_r+0x26>
 8000d20:	681c      	ldr	r4, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	6053      	str	r3, [r2, #4]
 8000d26:	4421      	add	r1, r4
 8000d28:	6011      	str	r1, [r2, #0]
 8000d2a:	e7da      	b.n	8000ce2 <_free_r+0x26>
 8000d2c:	d902      	bls.n	8000d34 <_free_r+0x78>
 8000d2e:	230c      	movs	r3, #12
 8000d30:	6003      	str	r3, [r0, #0]
 8000d32:	e7d6      	b.n	8000ce2 <_free_r+0x26>
 8000d34:	6825      	ldr	r5, [r4, #0]
 8000d36:	1961      	adds	r1, r4, r5
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	bf04      	itt	eq
 8000d3c:	6819      	ldreq	r1, [r3, #0]
 8000d3e:	685b      	ldreq	r3, [r3, #4]
 8000d40:	6063      	str	r3, [r4, #4]
 8000d42:	bf04      	itt	eq
 8000d44:	1949      	addeq	r1, r1, r5
 8000d46:	6021      	streq	r1, [r4, #0]
 8000d48:	6054      	str	r4, [r2, #4]
 8000d4a:	e7ca      	b.n	8000ce2 <_free_r+0x26>
 8000d4c:	b003      	add	sp, #12
 8000d4e:	bd30      	pop	{r4, r5, pc}
 8000d50:	20000088 	.word	0x20000088

08000d54 <sbrk_aligned>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	4e0e      	ldr	r6, [pc, #56]	; (8000d90 <sbrk_aligned+0x3c>)
 8000d58:	460c      	mov	r4, r1
 8000d5a:	6831      	ldr	r1, [r6, #0]
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	b911      	cbnz	r1, 8000d66 <sbrk_aligned+0x12>
 8000d60:	f000 f88c 	bl	8000e7c <_sbrk_r>
 8000d64:	6030      	str	r0, [r6, #0]
 8000d66:	4621      	mov	r1, r4
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f000 f887 	bl	8000e7c <_sbrk_r>
 8000d6e:	1c43      	adds	r3, r0, #1
 8000d70:	d00a      	beq.n	8000d88 <sbrk_aligned+0x34>
 8000d72:	1cc4      	adds	r4, r0, #3
 8000d74:	f024 0403 	bic.w	r4, r4, #3
 8000d78:	42a0      	cmp	r0, r4
 8000d7a:	d007      	beq.n	8000d8c <sbrk_aligned+0x38>
 8000d7c:	1a21      	subs	r1, r4, r0
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f000 f87c 	bl	8000e7c <_sbrk_r>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d101      	bne.n	8000d8c <sbrk_aligned+0x38>
 8000d88:	f04f 34ff 	mov.w	r4, #4294967295
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	2000008c 	.word	0x2000008c

08000d94 <_malloc_r>:
 8000d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d98:	1ccd      	adds	r5, r1, #3
 8000d9a:	f025 0503 	bic.w	r5, r5, #3
 8000d9e:	3508      	adds	r5, #8
 8000da0:	2d0c      	cmp	r5, #12
 8000da2:	bf38      	it	cc
 8000da4:	250c      	movcc	r5, #12
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	4607      	mov	r7, r0
 8000daa:	db01      	blt.n	8000db0 <_malloc_r+0x1c>
 8000dac:	42a9      	cmp	r1, r5
 8000dae:	d905      	bls.n	8000dbc <_malloc_r+0x28>
 8000db0:	230c      	movs	r3, #12
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	2600      	movs	r6, #0
 8000db6:	4630      	mov	r0, r6
 8000db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dbc:	4e2e      	ldr	r6, [pc, #184]	; (8000e78 <_malloc_r+0xe4>)
 8000dbe:	f000 f907 	bl	8000fd0 <__malloc_lock>
 8000dc2:	6833      	ldr	r3, [r6, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	bb34      	cbnz	r4, 8000e16 <_malloc_r+0x82>
 8000dc8:	4629      	mov	r1, r5
 8000dca:	4638      	mov	r0, r7
 8000dcc:	f7ff ffc2 	bl	8000d54 <sbrk_aligned>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	d14d      	bne.n	8000e72 <_malloc_r+0xde>
 8000dd6:	6834      	ldr	r4, [r6, #0]
 8000dd8:	4626      	mov	r6, r4
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d140      	bne.n	8000e60 <_malloc_r+0xcc>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	4631      	mov	r1, r6
 8000de2:	4638      	mov	r0, r7
 8000de4:	eb04 0803 	add.w	r8, r4, r3
 8000de8:	f000 f848 	bl	8000e7c <_sbrk_r>
 8000dec:	4580      	cmp	r8, r0
 8000dee:	d13a      	bne.n	8000e66 <_malloc_r+0xd2>
 8000df0:	6821      	ldr	r1, [r4, #0]
 8000df2:	3503      	adds	r5, #3
 8000df4:	1a6d      	subs	r5, r5, r1
 8000df6:	f025 0503 	bic.w	r5, r5, #3
 8000dfa:	3508      	adds	r5, #8
 8000dfc:	2d0c      	cmp	r5, #12
 8000dfe:	bf38      	it	cc
 8000e00:	250c      	movcc	r5, #12
 8000e02:	4629      	mov	r1, r5
 8000e04:	4638      	mov	r0, r7
 8000e06:	f7ff ffa5 	bl	8000d54 <sbrk_aligned>
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	d02b      	beq.n	8000e66 <_malloc_r+0xd2>
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	442b      	add	r3, r5
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	e00e      	b.n	8000e34 <_malloc_r+0xa0>
 8000e16:	6822      	ldr	r2, [r4, #0]
 8000e18:	1b52      	subs	r2, r2, r5
 8000e1a:	d41e      	bmi.n	8000e5a <_malloc_r+0xc6>
 8000e1c:	2a0b      	cmp	r2, #11
 8000e1e:	d916      	bls.n	8000e4e <_malloc_r+0xba>
 8000e20:	1961      	adds	r1, r4, r5
 8000e22:	42a3      	cmp	r3, r4
 8000e24:	6025      	str	r5, [r4, #0]
 8000e26:	bf18      	it	ne
 8000e28:	6059      	strne	r1, [r3, #4]
 8000e2a:	6863      	ldr	r3, [r4, #4]
 8000e2c:	bf08      	it	eq
 8000e2e:	6031      	streq	r1, [r6, #0]
 8000e30:	5162      	str	r2, [r4, r5]
 8000e32:	604b      	str	r3, [r1, #4]
 8000e34:	4638      	mov	r0, r7
 8000e36:	f104 060b 	add.w	r6, r4, #11
 8000e3a:	f000 f8cf 	bl	8000fdc <__malloc_unlock>
 8000e3e:	f026 0607 	bic.w	r6, r6, #7
 8000e42:	1d23      	adds	r3, r4, #4
 8000e44:	1af2      	subs	r2, r6, r3
 8000e46:	d0b6      	beq.n	8000db6 <_malloc_r+0x22>
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	50a3      	str	r3, [r4, r2]
 8000e4c:	e7b3      	b.n	8000db6 <_malloc_r+0x22>
 8000e4e:	6862      	ldr	r2, [r4, #4]
 8000e50:	42a3      	cmp	r3, r4
 8000e52:	bf0c      	ite	eq
 8000e54:	6032      	streq	r2, [r6, #0]
 8000e56:	605a      	strne	r2, [r3, #4]
 8000e58:	e7ec      	b.n	8000e34 <_malloc_r+0xa0>
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	6864      	ldr	r4, [r4, #4]
 8000e5e:	e7b2      	b.n	8000dc6 <_malloc_r+0x32>
 8000e60:	4634      	mov	r4, r6
 8000e62:	6876      	ldr	r6, [r6, #4]
 8000e64:	e7b9      	b.n	8000dda <_malloc_r+0x46>
 8000e66:	230c      	movs	r3, #12
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	f000 f8b6 	bl	8000fdc <__malloc_unlock>
 8000e70:	e7a1      	b.n	8000db6 <_malloc_r+0x22>
 8000e72:	6025      	str	r5, [r4, #0]
 8000e74:	e7de      	b.n	8000e34 <_malloc_r+0xa0>
 8000e76:	bf00      	nop
 8000e78:	20000088 	.word	0x20000088

08000e7c <_sbrk_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4d06      	ldr	r5, [pc, #24]	; (8000e98 <_sbrk_r+0x1c>)
 8000e80:	2300      	movs	r3, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff fb30 	bl	80004ec <_sbrk>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_sbrk_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_sbrk_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	20000090 	.word	0x20000090

08000e9c <__sread>:
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea4:	f000 f8a0 	bl	8000fe8 <_read_r>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	bfab      	itete	ge
 8000eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000eae:	89a3      	ldrhlt	r3, [r4, #12]
 8000eb0:	181b      	addge	r3, r3, r0
 8000eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eb6:	bfac      	ite	ge
 8000eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eba:	81a3      	strhlt	r3, [r4, #12]
 8000ebc:	bd10      	pop	{r4, pc}

08000ebe <__swrite>:
 8000ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec2:	461f      	mov	r7, r3
 8000ec4:	898b      	ldrh	r3, [r1, #12]
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	4605      	mov	r5, r0
 8000eca:	460c      	mov	r4, r1
 8000ecc:	4616      	mov	r6, r2
 8000ece:	d505      	bpl.n	8000edc <__swrite+0x1e>
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f000 f868 	bl	8000fac <_lseek_r>
 8000edc:	89a3      	ldrh	r3, [r4, #12]
 8000ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee6:	81a3      	strh	r3, [r4, #12]
 8000ee8:	4632      	mov	r2, r6
 8000eea:	463b      	mov	r3, r7
 8000eec:	4628      	mov	r0, r5
 8000eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef2:	f000 b817 	b.w	8000f24 <_write_r>

08000ef6 <__sseek>:
 8000ef6:	b510      	push	{r4, lr}
 8000ef8:	460c      	mov	r4, r1
 8000efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efe:	f000 f855 	bl	8000fac <_lseek_r>
 8000f02:	1c43      	adds	r3, r0, #1
 8000f04:	89a3      	ldrh	r3, [r4, #12]
 8000f06:	bf15      	itete	ne
 8000f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f12:	81a3      	strheq	r3, [r4, #12]
 8000f14:	bf18      	it	ne
 8000f16:	81a3      	strhne	r3, [r4, #12]
 8000f18:	bd10      	pop	{r4, pc}

08000f1a <__sclose>:
 8000f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1e:	f000 b813 	b.w	8000f48 <_close_r>
	...

08000f24 <_write_r>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	4d07      	ldr	r5, [pc, #28]	; (8000f44 <_write_r+0x20>)
 8000f28:	4604      	mov	r4, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	602a      	str	r2, [r5, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f7ff fa89 	bl	800044a <_write>
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	d102      	bne.n	8000f42 <_write_r+0x1e>
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	b103      	cbz	r3, 8000f42 <_write_r+0x1e>
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	bd38      	pop	{r3, r4, r5, pc}
 8000f44:	20000090 	.word	0x20000090

08000f48 <_close_r>:
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4d06      	ldr	r5, [pc, #24]	; (8000f64 <_close_r+0x1c>)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	602b      	str	r3, [r5, #0]
 8000f54:	f7ff fa95 	bl	8000482 <_close>
 8000f58:	1c43      	adds	r3, r0, #1
 8000f5a:	d102      	bne.n	8000f62 <_close_r+0x1a>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	b103      	cbz	r3, 8000f62 <_close_r+0x1a>
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	20000090 	.word	0x20000090

08000f68 <_fstat_r>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4d07      	ldr	r5, [pc, #28]	; (8000f88 <_fstat_r+0x20>)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	602b      	str	r3, [r5, #0]
 8000f76:	f7ff fa90 	bl	800049a <_fstat>
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	d102      	bne.n	8000f84 <_fstat_r+0x1c>
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	b103      	cbz	r3, 8000f84 <_fstat_r+0x1c>
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	bd38      	pop	{r3, r4, r5, pc}
 8000f86:	bf00      	nop
 8000f88:	20000090 	.word	0x20000090

08000f8c <_isatty_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d06      	ldr	r5, [pc, #24]	; (8000fa8 <_isatty_r+0x1c>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	602b      	str	r3, [r5, #0]
 8000f98:	f7ff fa8f 	bl	80004ba <_isatty>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_isatty_r+0x1a>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_isatty_r+0x1a>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	20000090 	.word	0x20000090

08000fac <_lseek_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d07      	ldr	r5, [pc, #28]	; (8000fcc <_lseek_r+0x20>)
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	602a      	str	r2, [r5, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f7ff fa88 	bl	80004d0 <_lseek>
 8000fc0:	1c43      	adds	r3, r0, #1
 8000fc2:	d102      	bne.n	8000fca <_lseek_r+0x1e>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	b103      	cbz	r3, 8000fca <_lseek_r+0x1e>
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000090 	.word	0x20000090

08000fd0 <__malloc_lock>:
 8000fd0:	4801      	ldr	r0, [pc, #4]	; (8000fd8 <__malloc_lock+0x8>)
 8000fd2:	f7ff be0b 	b.w	8000bec <__retarget_lock_acquire_recursive>
 8000fd6:	bf00      	nop
 8000fd8:	20000084 	.word	0x20000084

08000fdc <__malloc_unlock>:
 8000fdc:	4801      	ldr	r0, [pc, #4]	; (8000fe4 <__malloc_unlock+0x8>)
 8000fde:	f7ff be06 	b.w	8000bee <__retarget_lock_release_recursive>
 8000fe2:	bf00      	nop
 8000fe4:	20000084 	.word	0x20000084

08000fe8 <_read_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4d07      	ldr	r5, [pc, #28]	; (8001008 <_read_r+0x20>)
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	602a      	str	r2, [r5, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f7ff fa0a 	bl	8000410 <_read>
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	d102      	bne.n	8001006 <_read_r+0x1e>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	b103      	cbz	r3, 8001006 <_read_r+0x1e>
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	bd38      	pop	{r3, r4, r5, pc}
 8001008:	20000090 	.word	0x20000090

0800100c <_init>:
 800100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100e:	bf00      	nop
 8001010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001012:	bc08      	pop	{r3}
 8001014:	469e      	mov	lr, r3
 8001016:	4770      	bx	lr

08001018 <_fini>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr
