
STR_Usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  0001040c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  0800040c  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800040c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800040c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000584  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a9  00000000  00000000  000109c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008bb5  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000908  00000000  00000000  000197ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002f007  00000000  00000000  0001a0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000490fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  0004914c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003ec 	.word	0x080003ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003ec 	.word	0x080003ec

08000204 <uart_int>:
#include "Uart.h"



void uart_int(uint32_t BaudRate)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1U<<0);
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <uart_int+0x94>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a21      	ldr	r2, [pc, #132]	; (8000298 <uart_int+0x94>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~ (1U<<4);
 8000218:	4b20      	ldr	r3, [pc, #128]	; (800029c <uart_int+0x98>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <uart_int+0x98>)
 800021e:	f023 0310 	bic.w	r3, r3, #16
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <uart_int+0x98>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1c      	ldr	r2, [pc, #112]	; (800029c <uart_int+0x98>)
 800022a:	f043 0320 	orr.w	r3, r3, #32
 800022e:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |=(1U<<8);
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <uart_int+0x98>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a19      	ldr	r2, [pc, #100]	; (800029c <uart_int+0x98>)
 8000236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <uart_int+0x98>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <uart_int+0x98>)
 8000242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000246:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <uart_int+0x98>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a13      	ldr	r2, [pc, #76]	; (800029c <uart_int+0x98>)
 800024e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <uart_int+0x98>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <uart_int+0x98>)
 800025a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025e:	6213      	str	r3, [r2, #32]


	RCC->APB1ENR |= (1U<<17);
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <uart_int+0x94>)
 8000262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <uart_int+0x94>)
 8000266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026a:	6413      	str	r3, [r2, #64]	; 0x40

	USART2->BRR = compute_uart_bd(sys_freq, BaudRate);
 800026c:	4c0c      	ldr	r4, [pc, #48]	; (80002a0 <uart_int+0x9c>)
 800026e:	6879      	ldr	r1, [r7, #4]
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <uart_int+0xa0>)
 8000272:	f000 f819 	bl	80002a8 <compute_uart_bd>
 8000276:	4603      	mov	r3, r0
 8000278:	8123      	strh	r3, [r4, #8]

	USART2->CR1 = CR1_TE;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <uart_int+0x9c>)
 800027c:	2208      	movs	r2, #8
 800027e:	819a      	strh	r2, [r3, #12]
	USART2->CR1|= CR1_UE;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <uart_int+0x9c>)
 8000282:	899b      	ldrh	r3, [r3, #12]
 8000284:	b29b      	uxth	r3, r3
 8000286:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <uart_int+0x9c>)
 8000288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028c:	b29b      	uxth	r3, r3
 800028e:	8193      	strh	r3, [r2, #12]



}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	40023800 	.word	0x40023800
 800029c:	40020000 	.word	0x40020000
 80002a0:	40004400 	.word	0x40004400
 80002a4:	00f42400 	.word	0x00f42400

080002a8 <compute_uart_bd>:



static uint16_t compute_uart_bd(uint32_t periph_clock,uint32_t Baudrate)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	return ((periph_clock+(Baudrate/2U))/Baudrate);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	085a      	lsrs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	441a      	add	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	b29b      	uxth	r3, r3

}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <uart_write>:

void uart_write(int ch)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){}
 80002d8:	bf00      	nop
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <uart_write+0x30>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f8      	beq.n	80002da <uart_write+0xa>

		USART2->DR = (ch & 0xFF);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	b29a      	uxth	r2, r3
 80002ec:	4b04      	ldr	r3, [pc, #16]	; (8000300 <uart_write+0x30>)
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	b292      	uxth	r2, r2
 80002f2:	809a      	strh	r2, [r3, #4]




}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40004400 	.word	0x40004400

08000304 <main>:
#include "stm32f4xx.h"
#include "Uart.h"


int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	uart_int(14400);
 800030a:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 800030e:	f7ff ff79 	bl	8000204 <uart_int>


	while(1)
	{
		uart_write('H');
 8000312:	2048      	movs	r0, #72	; 0x48
 8000314:	f7ff ffdc 	bl	80002d0 <uart_write>
		uart_write('e');
 8000318:	2065      	movs	r0, #101	; 0x65
 800031a:	f7ff ffd9 	bl	80002d0 <uart_write>
		uart_write('l');
 800031e:	206c      	movs	r0, #108	; 0x6c
 8000320:	f7ff ffd6 	bl	80002d0 <uart_write>
		uart_write('l');
 8000324:	206c      	movs	r0, #108	; 0x6c
 8000326:	f7ff ffd3 	bl	80002d0 <uart_write>
		uart_write('o');
 800032a:	206f      	movs	r0, #111	; 0x6f
 800032c:	f7ff ffd0 	bl	80002d0 <uart_write>
		uart_write('\n');
 8000330:	200a      	movs	r0, #10
 8000332:	f7ff ffcd 	bl	80002d0 <uart_write>

		for(int i=0 ; i<1000000;i++);
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	e002      	b.n	8000342 <main+0x3e>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a01      	ldr	r2, [pc, #4]	; (800034c <main+0x48>)
 8000346:	4293      	cmp	r3, r2
 8000348:	ddf8      	ble.n	800033c <main+0x38>
		uart_write('H');
 800034a:	e7e2      	b.n	8000312 <main+0xe>
 800034c:	000f423f 	.word	0x000f423f

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ffbf 	bl	8000304 <main>

08000386 <LoopForever>:

LoopForever:
  b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	0800040c 	.word	0x0800040c
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
